/*
Copyright 2023 Hailiang Zhao.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/hliangzhao/torch-on-k8s/apis/train/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TorchJobLister helps list TorchJobs.
// All objects returned here must be treated as read-only.
type TorchJobLister interface {
	// List lists all TorchJobs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TorchJob, err error)
	// TorchJobs returns an object that can list and get TorchJobs.
	TorchJobs(namespace string) TorchJobNamespaceLister
	TorchJobListerExpansion
}

// torchJobLister implements the TorchJobLister interface.
type torchJobLister struct {
	indexer cache.Indexer
}

// NewTorchJobLister returns a new TorchJobLister.
func NewTorchJobLister(indexer cache.Indexer) TorchJobLister {
	return &torchJobLister{indexer: indexer}
}

// List lists all TorchJobs in the indexer.
func (s *torchJobLister) List(selector labels.Selector) (ret []*v1alpha1.TorchJob, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TorchJob))
	})
	return ret, err
}

// TorchJobs returns an object that can list and get TorchJobs.
func (s *torchJobLister) TorchJobs(namespace string) TorchJobNamespaceLister {
	return torchJobNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TorchJobNamespaceLister helps list and get TorchJobs.
// All objects returned here must be treated as read-only.
type TorchJobNamespaceLister interface {
	// List lists all TorchJobs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TorchJob, err error)
	// Get retrieves the TorchJob from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TorchJob, error)
	TorchJobNamespaceListerExpansion
}

// torchJobNamespaceLister implements the TorchJobNamespaceLister
// interface.
type torchJobNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TorchJobs in the indexer for a given namespace.
func (s torchJobNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TorchJob, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TorchJob))
	})
	return ret, err
}

// Get retrieves the TorchJob from the indexer for a given namespace and name.
func (s torchJobNamespaceLister) Get(name string) (*v1alpha1.TorchJob, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("torchjob"), name)
	}
	return obj.(*v1alpha1.TorchJob), nil
}
