/*
Copyright 2023 Hailiang Zhao.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	v1alpha1 "github.com/hliangzhao/torch-on-k8s/apis/train/v1alpha1"
	scheme "github.com/hliangzhao/torch-on-k8s/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// TorchJobsGetter has a method to return a TorchJobInterface.
// A group's client should implement this interface.
type TorchJobsGetter interface {
	TorchJobs(namespace string) TorchJobInterface
}

// TorchJobInterface has methods to work with TorchJob resources.
type TorchJobInterface interface {
	Create(ctx context.Context, torchJob *v1alpha1.TorchJob, opts v1.CreateOptions) (*v1alpha1.TorchJob, error)
	Update(ctx context.Context, torchJob *v1alpha1.TorchJob, opts v1.UpdateOptions) (*v1alpha1.TorchJob, error)
	UpdateStatus(ctx context.Context, torchJob *v1alpha1.TorchJob, opts v1.UpdateOptions) (*v1alpha1.TorchJob, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.TorchJob, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.TorchJobList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.TorchJob, err error)
	TorchJobExpansion
}

// torchJobs implements TorchJobInterface
type torchJobs struct {
	client rest.Interface
	ns     string
}

// newTorchJobs returns a TorchJobs
func newTorchJobs(c *TrainV1alpha1Client, namespace string) *torchJobs {
	return &torchJobs{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the torchJob, and returns the corresponding torchJob object, and an error if there is any.
func (c *torchJobs) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.TorchJob, err error) {
	result = &v1alpha1.TorchJob{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("torchjobs").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of TorchJobs that match those selectors.
func (c *torchJobs) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.TorchJobList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.TorchJobList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("torchjobs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested torchJobs.
func (c *torchJobs) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("torchjobs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a torchJob and creates it.  Returns the server's representation of the torchJob, and an error, if there is any.
func (c *torchJobs) Create(ctx context.Context, torchJob *v1alpha1.TorchJob, opts v1.CreateOptions) (result *v1alpha1.TorchJob, err error) {
	result = &v1alpha1.TorchJob{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("torchjobs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(torchJob).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a torchJob and updates it. Returns the server's representation of the torchJob, and an error, if there is any.
func (c *torchJobs) Update(ctx context.Context, torchJob *v1alpha1.TorchJob, opts v1.UpdateOptions) (result *v1alpha1.TorchJob, err error) {
	result = &v1alpha1.TorchJob{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("torchjobs").
		Name(torchJob.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(torchJob).
		Do(ctx).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *torchJobs) UpdateStatus(ctx context.Context, torchJob *v1alpha1.TorchJob, opts v1.UpdateOptions) (result *v1alpha1.TorchJob, err error) {
	result = &v1alpha1.TorchJob{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("torchjobs").
		Name(torchJob.Name).
		SubResource("status").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(torchJob).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the torchJob and deletes it. Returns an error if one occurs.
func (c *torchJobs) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("torchjobs").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *torchJobs) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("torchjobs").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched torchJob.
func (c *torchJobs) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.TorchJob, err error) {
	result = &v1alpha1.TorchJob{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("torchjobs").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
