/*
Copyright 2023 Hailiang Zhao.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

/* ModelVersion spec. */

// NFS represents the network-based storage.
type NFS struct {
	// NFS is the nfs server's IP address.
	Server string `json:"server,omitempty"`
	// The path under which the model is stored in the nfs server, e.g. /models/.
	Path string `json:"path,omitempty"`
	// The mounted path inside the pod container.
	// The model artifact is expected to be exported to this path.
	MountPath string `json:"mountPath,omitempty"`
}

// LocalStorage represents the local storage.
// The model artifact will be saved into the node where the master pod runs on.
type LocalStorage struct {
	// The name of the node for storing the model.
	// +required
	NodeName string `json:"nodeName,omitempty"`
	// The local host path under which the model is stored in the node, e.g. /models/.
	// +required
	Path string `json:"path,omitempty"`
	// The mounted path inside the container.
	// The model artifact is expected to be exported to this path.
	MountPath string `json:"mountPath,omitempty"`
}

// Storage describes how the output model saved.
type Storage struct {
	// NFS represents the network-based storage.
	NFS *NFS `json:"nfs,omitempty"`
	// LocalStorage represents the local storage.
	LocalStorage *LocalStorage `json:"localStorage,omitempty"`
}

// ModelVersionSpec defines the spec of ModelVersion.
type ModelVersionSpec struct {
	// The name of Model resource that this ModelVersion is associated with.
	// +required
	Model string `json:"modelName,omitempty"`
	// CreatedBy indicates the entity that creates the model version. e.g. the name of the
	// torchjob that creates the ModelVersion, or the name of the user that creates the ModelVersion.
	// +optional
	CreatedBy string `json:"createdBy,omitempty"`
	// Storage is the location where this ModelVersion is stored.
	// +optional
	Storage *Storage `json:"storage,omitempty"`
	// ImageRepo is the image repository to push the generated model image, e.g., "docker.io/some-model".
	// A particular image tag is automatically generated by the system when ImageTag is nil, e.g.,
	// "docker.io/some-model:v1".
	// +required
	ImageRepo string `json:"imageRepo,omitempty"`
	// ImageTag is the image tag suffixed with image repo, which indicates a specific image version/variant.
	// If empty, the first 5 digits of this ModelVersion object UID will be used as image tag.
	// +optional
	ImageTag string `json:"imageTag,omitempty"`
}

/* ModelVersion status. */

type ImageBuildPhase string

const (
	ImageBuilding       ImageBuildPhase = "ImageBuilding"
	ImageBuildFailed    ImageBuildPhase = "ImageBuildFailed"
	ImageBuildSucceeded ImageBuildPhase = "ImageBuildSucceeded"
)

// ModelVersionStatus defines the observed state of ModelVersion.
type ModelVersionStatus struct {
	// The image name of the model version (Spec.ImageRepo:Spec.ImageTag).
	Image string `json:"image,omitempty"`
	// ImageBuildPhase is the phase of the image building process.
	ImageBuildPhase ImageBuildPhase `json:"imageBuildPhase,omitempty"`
	// FinishTime is the time when image building is finished.
	FinishTime *metav1.Time `json:"finishTime,omitempty"`
	// Any message associated with the building process.
	Message string `json:"message,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:defaulter-gen=TypeMeta
// +kubebuilder:object:root=true
// +kubebuilder:resource:scope=Namespaced
// +kubebuilder:resource:shortName=mv
// +kubebuilder:printcolumn:name="Model",type=string,JSONPath=`.spec.modelName`
// +kubebuilder:printcolumn:name="Image",type=string,JSONPath=`.status.image`
// +kubebuilder:printcolumn:name="Created-By",type=string,JSONPath=`.spec.createdBy`
// +kubebuilder:printcolumn:name="Finish-Time",type=string,JSONPath=`.status.finishTime`

// ModelVersion is the Schema for the modelversions API
type ModelVersion struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   ModelVersionSpec   `json:"spec,omitempty"`
	Status ModelVersionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
// +k8s:defaulter-gen=TypeMeta
// +kubebuilder:resource:scope=Namespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// ModelVersionList contains a list of ModelVersion
type ModelVersionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ModelVersion `json:"items"`
}

func init() {
	SchemeBuilder.Register(&ModelVersion{}, &ModelVersionList{})
}
